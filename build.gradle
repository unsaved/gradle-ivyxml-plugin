defaultTasks 'jar'

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'com.admc:gradle-javaPropFile-plugin:latest.milestone'
    }
}

apply plugin: 'groovy'
apply plugin: 'javaPropFile'

def localGradleFile = file('local.gradle')
if (localGradleFile.isFile()) {
    logger.info('''Executing optional build file 'localGradleFile'.''')
    apply from: localGradleFile
}

// Defaults that can be overridden with property files:
project.setProperty('org.name', System.properties['user.name'])
project.setProperty('jar.title', 'Customization')

propFileLoader.typeCasting=true
propFileLoader.traditionalPropertiesInit()

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    groovy localGroovy()
    testCompile 'org.hamcrest:hamcrest-library:1.3.RC2'
}

task noop << { }
noop.description = 'Noop task for Gradle testing'

jar { doFirst {
    project.metaInf << files('doc/LICENSE.txt')
    jar { manifest { attributes(
        'Specification-Title': 'Ivyxml Gradle Plugin',
        'Specification-Version': project.property('spec.version'),
        'Specification-Vendor': 'Axis Data Management Corp.',
        'Implementation-Title': project.property('jar.title'),
        'Implementation-Version': project.version,
        'Implementation-Vendor': project.property('org.name')
    ) } }
} }

// This task only for SCM administrator.  Update version and execute this task.
task updateWrapper(type: Wrapper) { doFirst {
    assert project.hasProperty('newVersion') :
        '''Property 'newVersion' is required for task 'updateWrapper'.'''
    assert project.newVersion == gradle.gradleVersion :
        "You invoked Gradle system with version $gradle.gradleVersion instead of desired version $project.newVersion"
} }
updateWrapper << {
    gradleVersion = project['newVersion']
    println 'WARNING:  Merge our customizations into the newly-generated wrapper scripts'
}
updateWrapper.description = 'Update Gradle version.  For SCM Administrators.'

task checkTabs << {
    FileTree tree = fileTree(dir: '..')
    tree.exclude '**/.*/**'
    tree.include  '*.*'
    tree.include  'doc/*'
    tree.include  'src/**'
    def tabFiles = []
    tree.each { if (it.text.indexOf('\t') > -1) tabFiles << relativePath(it) }
    if (tabFiles.size() > 0) println '  ' + tabFiles.join('\n  ')
}
checkTabs.description = 'Reports on any text files containing tab characters'

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}
sourcesJar.description = 'Build sources jar file'

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}
javadocJar.description = 'Build javadoc jar file'
